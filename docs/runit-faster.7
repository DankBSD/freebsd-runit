.Dd December 11, 2018
.Dt RUNIT-FASTER 7
.Os
.Sh NAME
.Nm runit-faster
.Nd "Getting started"
.Sh SETUP AS PID 1
This section only applies if opting into using
.Nm
as PID 1.
It is entirely optional and the service templates and other features
can be used via the
.Sy runsvdir
.Xr rc 8
service instead:
.Bd -literal -offset indent
$ sysrc runsvdir_enable=YES
$ service runsvdir start
.Ed
.Pp
The
.Nm
port by default assumes that
.Pa /usr/local
is located on the same partition as the root filesystem.
For systems where this is not the case, runit has to be compiled
with the
.Sy ROOT
option on, to make sure that
.Xr runit 8
can properly bootstrap the system.
Binaries and the necessary configuration files will then be installed
into
.Pa /etc/runit
and
.Pa /sbin
instead of in
.Pa /usr/local/etc/runit
and
.Pa /usr/local/sbin .
In this document we will always refer to
.Pa /usr/local/etc/runit
directly instead of
.Pa /etc/runit .
Please adjust paths accordingly if you have to use the
.Sy ROOT
option.
.Pp
To get started edit
.Pa /boot/loader.conf
and tell the kernel to attempt to use
.Pa /usr/local/sbin/runit-init
as PID 1.
.Bd -literal -offset indent
init_path="/usr/local/sbin/runit-init:/rescue/init"
.Ed
.Pp
No service is enabled by default.
Some basic ones must be enabled, at the very least one getty service
in the
.Sy default
runlevel, to get a login prompt after rebooting:
.Bd -literal -offset indent
$ ln -s /usr/local/etc/sv/devd \\
	/usr/local/etc/runit/runsvdir/default
$ ln -s /usr/local/etc/sv/getty-ttyv0 \\
	/usr/local/etc/runit/runsvdir/default
$ ln -s /usr/local/etc/sv/syslogd \\
	/usr/local/etc/runit/runsvdir/default
.Ed
.Pp
For headless machines (or e.g.,
.Xr bhyve 8
virtual machines) with a serial port make sure to enable `getty-ttyu0`
instead of `getty-ttyv0`:
.Bd -literal -offset indent
$ ln -s /usr/local/etc/sv/getty-ttyu0 \\
	/usr/local/etc/runit/runsvdir/default
.Ed
.Pp
The runlevel can be selected via the
.Sy runit.runlevel
in the kernel environment e.g.,
as specified in
.Pa /boot/loader.conf .
If omitted a value of
.Sy default
is used.
.Pp
Settings from
.Pa /etc/rc.conf
will \fBnot\fP be applied when using
.Nm .
The hostname has to be set either via
.Sy runit.hostname
in the kernel environment or by creating
.Pa /usr/local/etc/runit/hostname :
.Bd -literal -offset indent
$ echo my-hostname > /usr/local/etc/runit/hostname
.Ed
.Pp
The keyboard layout has to be set via a core service like
.Sy 12-console.sh .
See
.Sx SYSTEM INITIALIZATION
below for more information.
.Pp
.Sy kld_list
from
.Pa /etc/rc.conf
for loading kernel modules can be migrated to
.Pa /usr/local/etc/runit/modules .
They will be loaded as a first step when the system initializes.
.Bd -literal -offset indent
$ sysrc kld_list
kld_list: /boot/modules/i915kms.ko vboxdrv vboxnetflt vboxnetadp
$ cat <<EOF > /usr/local/etc/runit/modules
/boot/modules/i915kms.ko
vboxdrv
vboxnetflt
vboxnetadp
EOF
.Ed
.Pp
Enable additional service as you see fit.
Make sure to always use absolute paths when symlinking new services to a runlevel.
.Pp
Now reboot! If something goes wrong, try booting in single user mode or
temporarily revert back to
.Xr init 8
and
.Xr rc 8
at the
.Xr loader 8
prompt:
.Bd -literal -offset indent
set init_path=/rescue/init
.Ed
.Pp
After a successful reboot some basic system maintenance tasks must be
setup.
Normally these are defined in
.Pa /etc/crontab
and started by
.Xr cron 8 .
.Pp
As the system is now fully bootstrapped via
.Nm
we can symlink new services directly into
.Pa /var/service ,
which itself is a symlink to
.Pa /etc/runit/runsvdir/current
which points to the currently active runlevel.
.Xr runsv 8
will immediately start the services once symlinked.
.Pp
System maintenance tasks can be enabled via cron
.Bd -literal -offset indent
$ ln -s /usr/local/etc/sv/cron /var/service
.Ed
.Pp
or by using the
.Xr snooze 1
based replacements:
.Bd -literal -offset indent
$ ln -s /usr/local/etc/sv/adjkerntz /var/service
$ ln -s /usr/local/etc/sv/periodic-daily /var/service
$ ln -s /usr/local/etc/sv/periodic-weekly /var/service
$ ln -s /usr/local/etc/sv/periodic-monthly /var/service
$ ln -s /usr/local/etc/sv/save-entropy /var/service
.Ed
.Pp
If the
.Xr snooze 1
services are used and cron is also needed the corresponding system
maintenance tasks should be disabled in
.Pa /etc/crontab .
.Pp
To mimic a default
.Fx
console setup more getty services need to be enabled.
Enable all virtual terminals that are normally enabled in
.Pa /etc/ttys :
.Bd -literal -offset indent
$ ln -s /usr/local/etc/sv/getty-ttyv1 /var/service
$ ln -s /usr/local/etc/sv/getty-ttyv2 /var/service
$ ln -s /usr/local/etc/sv/getty-ttyv3 /var/service
$ ln -s /usr/local/etc/sv/getty-ttyv4 /var/service
$ ln -s /usr/local/etc/sv/getty-ttyv5 /var/service
$ ln -s /usr/local/etc/sv/getty-ttyv6 /var/service
$ ln -s /usr/local/etc/sv/getty-ttyv7 /var/service
.Ed
.Pp
.Xr reboot 8 ,
.Xr halt 8 ,
.Xr poweroff 8 ,
and
.Xr shutdown 8
will not work correctly with
.Xr runit 8
because of the way they send signals to PID 1.
.Pp
Reboot the system:
.Bd -literal -offset indent
$ runit-init 6
.Ed
.Pp
Power off the system:
.Bd -literal -offset indent
$ runit-init 0
.Ed
.Sh SYSTEM INITIALIZATION
This section only applies if opting into using
.Nm
as PID 1.
.Nm
initializes the system in two stages.
The first stage will run one time system tasks, dubbed
core services, located in
.Pa /usr/local/etc/runit/core-services :
.Bl -tag -width 2n
.It Sy 11-devmatch.sh
Use
.Xr devmatch 8
to load kernel modules.
.It Sy 11-kld.sh
Load kernel modules listed in
.Pa /usr/local/etc/runit/modules .
.It Sy 11-set-defaults.sh
Set some system defaults.
.It Sy 12-console.sh
A user-editable service file where keyboard layout and other console
settings should be added to.
.Pp
Use the
.Sy us
keyboard layout and
.Sy terminus-b32
font on all virtual terminals:
.Bd -literal -offset indent
kbdcontrol -l us < /dev/ttyv0
for ttyv in /dev/ttyv*; do
	vidcontrol -f terminus-b32 < ${ttyv} > ${ttyv}
done
.Ed
.It Sy 30-geli.sh
Decrypt GELI devices.
.It Sy 31-fsck.sh
Run fsck.
.It Sy 31-mount.sh
Mount all early filesystem.
.It Sy 31-zfs-mount.sh
Mount ZFS datasets.
.It Sy 33-init-var.sh
Initialize
.Pa /var .
.It Sy 33-microcode_update.sh
Update CPU microcode if sysutils/devcpu-data is installed.
.It Sy 33-savecore.sh
Run
.Xr savecore 8
at boot to retrieve a kernel crash device from the dump device
as specified in
.Pa /boot/loader.conf
via
.Sy dumpdev .
.It Sy 33-set-dumpdev.sh
Enables the dump device as specified in
.Pa /boot/loader.conf
via
.Sy dumpdev .
The crash dump is encrypted with
.Pa /etc/dumppubkey
if it exists and if the kernel supports encrypted crash dumps.
See
.Xr dumpon 8
for more information.
.It Sy 33-swap.sh
Enable swap.
.It Sy 41-devfs-rules.sh
Load
.Xr devfs 8
rules from
.Pa /etc/defaults/devfs.rules
and
.Pa /etc/devfs.rules .
.It Sy 41-entropy.sh
Initialize the entropy harvester.
.It Sy 41-hostid.sh
Generate a hostid.
.It Sy 41-hostname.sh
Set the hostname.
.It Sy 41-ldconfig.sh
Setup the shared library cache.
.It Sy 41-loopback.sh
Create lo0.
.It Sy 41-mixer.sh
Restore soundcard mixer values.
.It Sy 41-nextboot.sh
Prune nextboot configuration.
.It Sy 41-rctl.sh
Apply resource limits from
.Pa /etc/rctl.conf .
.It Sy 44-bhyve-network.sh
Create a bhyve0 bridge for networking for simple
.Xr bhyve 8
VMs.
.It Sy 44-jail-network.sh
Create a jail0 interface with an assigned network of
192.168.95.0/24 to ease setting up jails.
.It Sy 51-pf.sh
Enable PF and load /etc/pf.conf.
.It Sy 91-cleanup.sh
Clean
.Pa /tmp .
.It Sy 92-nfs.sh
Start the NFS daemons when an
.Pa /etc/exports
or
.Pa /etc/zfs/exports
exists and exports some filesystems.
.It Sy 93-ctld.sh
Start
.Xr ctld 8
when
.Pa /etc/ctl.conf
exists.
.Xr ctld 8
has no support for starting the daemon in the foreground, so it cannot
easily be supervised with a
.Xr runsv 8
service.
.It Sy 95-mount-late.sh
Mount all late filesystems.
.It Sy 99-binmisc.sh
Register the QEMU interpreters from emulators/qemu-user-static and
WINE from emulators/wine with
.Xr binmiscctl 8 .
.It Sy 99-start-jails.sh
Start all vanilla
.Xr rc 8
jails defined in
.Pa /etc/jail.conf
that do not use
.Nm
for starting services.
.El
.Pp
The core services will be sourced in lexicographic order.
Users can insert their own core services in the right places
by creating a file with an even number prefix.
.Pa 12-console.sh ,
.Pa 30-geli.sh ,
.Pa 44-bhyve-network.sh ,
.Pa 44-jail-network.sh
are pre-existing user-editable files.
Odd numbered services should be treated as immutable and
will be overwritten when updating
.Nm .
.Pp
Stage 2 will look up the runlevel in the
.Pa runit.runlevel
kenv and link
.Pa /usr/local/etc/runit/runsvdir/$runlevel
to
.Pa /var/service .
It will then run
.Xr runsvdir 8
on it which starts all defined services for the runlevel
and starts supervising them.
.Pp
.Nm
comes with some services out of the box for the user's
convenience in
.Pa /usr/local/etc/sv .
These can be linked to the runlevel to enable them.
.Sh SERVICE TEMPLATES
.Nm
provides several service templates to get you started quickly.
.Pp
All
.Xr svclone 8
commands are run in
.Pa /usr/local/etc/sv
to keep verbosity of the examples to a minimum.
.Ss acme-client-template
This service provides an easy way to setup the
.Pa security/acme-client
Let's Encrypt client.
.Pp
Clone the template and name the service directory after the domain and
altname you want to create a certificate for:
.Bd -literal -offset indent
svclone -t acme-client \\
	local/acme-client@example.com@www.example.com
.Ed
.Pp
There must be one domain name and there can be many altnames separated
by an @:
.Bd -literal -offset indent
acme-client@<domain>[@<altname>]*
.Ed
.Pp
.Xr acme-client 1
assumes that you have setup an HTTP server to respond to
.Pa /.well-known/acme-challenge
requests on the domain.
By default the challenge dir is set to
.Pa /usr/jails/http/usr/local/www/acme-client/<domain> .
.Pp
This can be changed by creating
.Pa conf
in the service directory with
.Bd -literal -offset indent
CHALLENGEDIR=/path/to/challenge/dir
.Ed
.Pp
Run the service manually once to register a new account and create
the domain keys
.Bd -literal -offset indent
(cd local/acme-client@example.com@www.example.com && \\
	./acme-client.sh)
.Ed
.Pp
This will create the following files:
.Pa /usr/local/etc/ssl/example.com/cert.pem
.Pa /usr/local/etc/ssl/example.com/chain.pem
.Pa /usr/local/etc/ssl/example.com/fullchain.pem
.Pa /usr/local/etc/ssl/example.com/private/example.com.pem
.Pp
Edit the
.Pa finish
script and find a way to inform your applications to reload the
renewed certificates or maybe copy them into the right places.
.Pp
The service can now be enabled and will renew certificates at
approximately 1 am every night automatically:
.Bd -literal -offset indent
ln -s ${PWD}/local/acme-client@example.com@www.example.com \\
	/var/service
.Ed
.Pp
The time can be adjusted by editing the
.Pa run
script.
.Ss bhyve-template
Service template to create simple
.Nm runit-faster
managed VMs.
.Pp
VM parameters are determined through the service directory name:
.Bd -literal -offset indent
bhyve@<name>@<memory>@<cpus>@<bridge>@<bootmethod>
.Ed
.Pp
Every parameter but the VM name are optional.
.Bl -tag -width 2n
.It Sy memory
Guest memory size.
Defaults to 512m.
.It Sy cpus
Number of virtual CPUs.
Defaults to 1.
.It Sy bridge
Assign VM to this bridge.
Defaults to
.Sy bhyve0 ,
as created by the
.Sy 44-bhyve-network.sh
core service.
For systems not using
.Nm runit-faster
as PID 1, make sure to create a
.Sy bhyve0
bridge via
.Xr rc.conf 5 .
Assign your outgoing interface to this bridge to provide some network
connectivity to the VM.
.It Sy bootmethod
How to boot the VM.
Valid values are
.Ar uefi ,
.Ar csm ,
and
.Ar bhyveload .
.Pp
The
.Ar uefi
and
.Ar csm
methods require that
.Pa sysutils/bhyve-firmware
is installed.
.Pp
.Ar bhyveload
will use
.Xr bhyveload 8
to boot the VM.
It is assumed that
.Pa disk0
is the root device.
.El
.Pp
Additional arguments to
.Xr bhyve 8
can be passed through setting
.Sy OPTS
in
.Pa conf .
.Pp
To add disk images, or disk devices to the VM simply provide
.Pa disk[0..15]
or
.Pa cdrom
symlinks in the service directory.
.Pp
VMs get an automatically assigned
.Xr tap 4
network interface which is added to the configured bridge, assigned to
the
.Pa runit-managed
interface group.
.Pp
As one would expect, if the VM reboots, the service will restart the
VM.
If it powers off, the service will be marked as down and will require
manual administrator intervention to restart.
Edit
.Pa finish
to change this behavior.
.Pp
Create a
.Ox 6.3
VM with 1g of memory that boots from
.Pa miniroot63.fs :
.Bd -literal -offset indent
svclone -t bhyve local/bhyve@openbsd63@1g
ln -s /root/miniroot63.fs local/bhyve@openbsd63@1g/disk0
ln -s ${PWD}/local/bhyve@openbsd63@1g /var/service
.Ed
.Pp
List all interfaces auto-assigned to the
.Pa openbsd63
VM:
.Bd -literal -offset indent
$ cat /var/service/bhyve@openbsd63@1g/supervise/network-interfaces
tap0
.Ed
.Ss dhclient-template
Service to run
.Xr dhclient 8
on a specific interface.
.Pp
The interface needs to be part of the service name:
.Bd -literal -offset indent
dhclient@<interface>
.Ed
.Pp
Create a new dhclient service for the
.Pa em0
interface and enable it:
.Bd -literal -offset indent
svclone -t dhclient local/dhclient@em0
ln -s ${PWD}/local/dhclient@em0 /var/service
.Ed
.Ss jail-template
Service template to create
.Nm
managed jails.
.Pp
If you are using runit-faster as PID 1 it will automatically create a
jail0 interface in the 192.168.95.0/24 network.
The host gets IP 192.168.95.1.
This can be used this to quickly setup jails.
You can change the network and IP settings by editing
.Pa /usr/local/etc/runit/core-services/44-jail-network.sh .
.Pp
For vanilla
.Xr rc 8
systems this can be replicated via
.Pa /etc/rc.conf :
.Bd -literal -offset indent
pf_enable="YES"
.Ed
.Pp
Setup NAT in
.Pa /etc/pf.conf :
.Bd -literal -offset indent
jail_http_ip = 192.168.95.2

nat pass on $ext_if from runit-jail:network to any -> $ext_if
rdr pass on $ext_if proto tcp from any to $ext_if \\
	port { https, http } -> $jail_http_ip
.Ed
.Pp
Clone the template on the host:
.Bd -literal -offset indent
svclone -t jail local/jail@http
.Ed
.Pp
Modify
.Pa local/jail@http/jail.conf
to suite your needs
.Bd -literal -offset indent
ip4.addr = "jail0|192.168.95.2/24";
.Ed
.Pp
By default the jail root is determined from the jail name and set to
.Pa /usr/jails/$name .
To change it create a
.Pa root
symlink pointing to the jail's root directory.
.Pp
By default the jail's hostname is determined from the jail name.
Edit
.Pa jail.conf
to override it:
.Bd -literal -offset indent
host.hostname = "http-runit.example.com";
.Ed
.Pp
Setup a basic jail with your favourite method e.g.,
.Bd -literal -offset indent
bsdinstall jail /usr/jails/http
freebsd-update -b /usr/jails/http fetch
freebsd-update -b /usr/jails/http update
.Ed
.Pp
Install and enable nginx and runit-faster in the jail
.Bd -literal -offset indent
pkg -c /usr/jails/http install nginx runit-faster
ln -s /usr/local/etc/sv/nginx \\
	/usr/jails/http/usr/local/etc/runit/runsvdir/default
.Ed
.Pp
Edit
.Pa fstab
to mount filesystems when the jail starts.
.Sy %%jail%%
is substituted with the jail's root directory.
.Pp
Finally enable the jail on the host
.Bd -literal -offset indent
ln -s ${PWD}/local/jail@http /var/service
.Ed
.Ss kore-template
.Ss runsvdir-user-template
Create a user
.Xr runsvdir 8
service to let kate run her own custom services
(managed via
.Pa ~/service )
when the system boots up:
.Bd -literal -offset indent
svclone -t runsvdir-user local/runsvdir@kate
ln -s ${PWD}/local/runsvdir@kate /var/service
.Ed
.Pp
kate can now create, enable, and manage a user-level sndiod instance by
herself:
.Bd -literal -offset indent
mkdir ~/.sv ~/service
svclone -u /usr/local/etc/sv/sndiod ~/.sv/sndiod
ln -s ~/.sv/sndiod ~/service
.Ed
.Ss webcamd-template
Run
.Xr webcamd 8
on specific devices.
.Pp
First determine the device
.Xr webcamd 8
should attach to:
.Bd -literal -offset indent
$ webcamd -l
Available device(s):
webcamd -N Chicony-Electronics-Co--Ltd--HD-WebCam -S unknown -M 0
webcamd -N vendor-0x06cb-product-0x2970 -S unknown -M 0
webcamd -N vendor-0x0489-product-0xe078 -S unknown -M 0
.Ed
.Pp
Create a service and start it:
.Bd -literal -offset indent
svclone -t webcamd local/webcamd@Chicony-Electronics-Co--Ltd--HD-WebCam
ln -s ${PWD}/local/webcamd@Chicony-Electronics-Co--Ltd--HD-WebCam \\
	/var/service
.Ed
.Sh SEE ALSO
.Xr acme-client 1 ,
.Xr snooze 1 ,
.Xr sv 8 ,
.Xr svclone 8
.Sh AUTHORS
.An Tobias Kortkamp Aq Mt tobik@FreeBSD.org
